d1$CTRGroup <- cut(d1$CTR, c(-Inf, 0.2, 0.4, 0.6, 0.8, Inf))
levels(d1$CTRGroup) <- c("0<=CTR<0.2", "0.2<=CTR<0.4", "0.4<=CTR<0.6", "0.6<=CTR<0.8", "0.8<=CTR")
```
**Profile of data "d1"**
```{r}
dim(d1)
#get the total number of Male, Impressions, Clicks and Signed_In
sapply(d1[c(2,3,4,5)],sum)
#get the mean of Age, Impressions, Clicks, CTR and percentage of males and signed_In
sapply(d1[c(1,2,3,4,5,9)],mean)
#get the means by dayGroup
summaryBy(Age+Gender+Signed_In+Impressions+Clicks+CTR~dayGroup, data=d1)
#table the CTRGroup vs dayGroup
table(d1$CTRGroup,d1$dayGroup)
```
From the tables above, especially the summaryBy table, we notice that as day increases, the percentage of males and signed_in users goes down, the mean of CTR goes up.
Since there are a lot of observations with age=0 and from the previous analysis we can conclude that age does not make any difference on CTR. So we leave out the effects of age.
Then we plot histograms to visulize the trend of gender, signed_in and CTR as day increases.
**Visualization**
```{r}
#distribution of days
hist(d1$day,main="",xlab="day")
```
The histogram suggests that 5 out of 31 days have comparingly much more observations, it may be resulted from the reason of Monday in which people are more likely to read news and browse NewYorkTimes website.
```{r}
#get means of CTR by day
CTRmean <- NULL
for (i in 1:31){
CTRmean[i] <- mean(d1$CTR[which(d1$day==i)])
}
#CTRmean vs days
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31))+geom_line()+labs(x="day")
```
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31),size=2)+geom_line()+labs(x="day")
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31),size=5)+geom_line()+labs(x="day")
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31),size=50)+geom_line()+labs(x="day")
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31))+geom_line(size=5)+labs(x="day")
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31))+geom_line(size=2)+labs(x="day")
ggplot(subset(d1, Clicks>0),aes(x=CTR, colour=dayGroup))+geom_density()
ggplot(subset(d1, Clicks>0),aes(x=CTR, colour=dayGroup))+geom_density(size=2)
ggplot(subset(d1, Clicks>0),aes(x=CTR, colour=dayGroup))+geom_density(size=1.5)
ggplot(subset(d1, Clicks>0),aes(x=CTR, colour=dayGroup))+geom_density(size=1.2)
head(d1)
ggplot(subset(d1, Clicks>0),aes(x=CTR, colour=day))+geom_density(size=1.2)
ggplot(d1,aes(x=CTR, colour=dayGroup))+geom_density()
nyt$dayGroup <- cut(nyt$day, c(-Inf, 6, 12, 18, 24, Inf))
levels(nyt$dayGroup) <- c("1-5", "6-11", "12-17","18-23","23-31")
d1 <- subset(nyt, Impressions > 0)
d1$CTR <- d1$Clicks/d1$Impressions
d1$CTRGroup <- cut(d1$CTR, c(-Inf, 0.2, 0.4, 0.6, 0.8, Inf))
levels(d1$CTRGroup) <- c("0<=CTR<0.2", "0.2<=CTR<0.4", "0.4<=CTR<0.6", "0.6<=CTR<0.8", "0.8<=CTR")
sapply(d1[c(2,3,4,5)],sum)
sapply(d1[c(1,2,3,4,5,9)],mean)
summaryBy(Age+Gender+Signed_In+Impressions+Clicks+CTR~dayGroup, data=d1)
table(d1$CTRGroup,d1$dayGroup)
hist(d1$day,main="",xlab="day")
CTRmean <- NULL
for (i in 1:31){
CTRmean[i] <- mean(d1$CTR[which(d1$day==i)])
}
ggplot(subset(d1, Clicks>0),aes(x=CTR, colour=dayGroup))+geom_density(size=1.2)
ggplot(d1,aes(x=CTR, colour=dayGroup))+geom_density()
ggplot(data.frame(CTRmean),aes(x=1:31,y=CTRmean,colour=1:31))+geom_line(size=2)+labs(x="day")
CTRmean
ls()
load("~/Documents/MASDA/Data science/hw/miniproject/DataEnviorment.RData")
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
box()
text(0.78,1,"(.78, 1): The shaded area is green!" )
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)")
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))))
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
text(0.78,1,"(.78, 1): The shaded area is green!" )
text(0.78,1,"(.78, 1): The shaded area is green!" ,size=1)
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=1)
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=1)
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=1)
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=1)
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=.51)
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3,
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=.8)
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=.8)
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)",cex=.8)
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))),cex=.8)
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1",cex.main=0.8)
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=.8)
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)",cex=.8)
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))),cex=.8)
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
nationality <- c("Germany","France","Great Britain", "USA", "Rest of the world")
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1",cex.main=1)
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=.8)
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)",cex=.8)
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))),cex=.8)
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
nationality <- c("Germany","France","Great Britain", "USA", "Rest of the world")
data_byrow <- c(9.303,7.959,15.224,0.905,17.463,9.536,7.736,15.629,0.894,18.635,9.918,8.875,16.090,0.883,20.148)
year <- c(2003,2004,2005)
tourist <- matrix(data_byrow,nrow=5,dimnames = list(nationality, year))
tourist
total_year <- matrix(apply(tourist,2,sum),nrow=1,dimnames=list("Total of the tourists by year:",year))
total_nation <-matrix(apply(tourist,1,sum),nrow=1,dimnames=list("total of the tourists by nationality:",nationality))
total_year
total_nation
install.packages("RJSONIO")
library(RJSONIO)
# from the website
foodMarketsRaw<-fromJSON("https://data.ny.gov/api/views/9a8c-vfzj/rows.json?accessType=DOWNLOAD")
# if you downloaded
#foodMarketsRaw<-fromJSON("retail_food_markets.json")
head(foodMarketsRaw)
foodMarkets<-foodMarketsRaw[['data']]
foodMarkets[[1]][[14]] ## name of food market 1
foodMarkets[[2]][[14]] ## name of food market 2
fmNames<-sapply(foodMarkets, function(x) x[[14]])
head(fmNames)
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1",cex.main=1)
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=.8)
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)",cex=.8)
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))),cex=.8)
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1",cex.main=1)
box()
text(0.78,1,"(.78, 1): The shaded area is green!" ,cex=1)
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)",cex=1)
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))),cex=1)
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
pdf(file=paste(getwd(),'/inclass3_Yifan_YiZheng.pdf',sep=""))
x<-seq(0,1,0.2)
plot(x,x*2,xlab='x',type='l',ylab='f(x)',main="Probability Density Function f(x) = 2x, 0 < x < 1")
box()
text(0.78,1,"(.78, 1): The shaded area is green!" )
text(0.4,1.8,"(.4, 1.8): Red Arrow from (.2, 1.4) to (.3, .25), lwd = 4)")
text(0.2,1.5,expression(paste(integral(2*xdx,0,0.5)=="[",x^2,"]"[0]^{1/2}," = ",frac(1,4))))
polygon(c(0,0.5,0.5),c(0,1,0),col=3)
arrows(0.2,1.4,0.3,0.25,lwd=4,col=2)
dev.off()
Q2
nationality <- c("Germany","France","Great Britain", "USA", "Rest of the world")
data_byrow <- c(9.303,7.959,15.224,0.905,17.463,9.536,7.736,15.629,0.894,18.635,9.918,8.875,16.090,0.883,20.148)
year <- c(2003,2004,2005)
tourist <- matrix(data_byrow,nrow=5,dimnames = list(nationality, year))
tourist
total_year <- matrix(apply(tourist,2,sum),nrow=1,dimnames=list("Total of the tourists by year:",year))
total_nation <-matrix(apply(tourist,1,sum),nrow=1,dimnames=list("total of the tourists by nationality:",nationality))
total_year
total_nation
xmat <- matrix(c(1,2,3,2,5,8,3,8,13),ncol=3)
xmat
eigen(xmat)
y <- eigen(xmat)
y$vectors
y$vectors %*% diag(y$values) %*% t(y$vectors)
y$vectors * diag(y$values) * t(y$vectors)
xm <- matrix(c(5,1,1,3),ncol=2)
xm
aa <- chol(xm)
aa
t(aa) %*% aa
qr(xm)
function(x,y,z=1){x+y+2*z}
ff <- function(x,y,z=1){x+y+2*z}
ff(1,2,3)
fa <- function(x)
{
y <- x*x
z <- x^3
return(c(y,z))
}
fa(3)
random.sum <- function(n)
{
x[1:n] < ceiling(10*runif(n))
cat("x:",x[1:n],"\n")
cat("x(full):",x,"\n")
return(sum(x))
}
random.sum(10)
x<-numeric()
random.sum <- function(n)
{
x[1:n] <- ceiling(10*runif(n))
cat("x:",x[1:n],"\n")
cat("x(full):",x,"\n")
return(sum(x))
}
random.sum(10)
random.sum(5)
x<-rep(10,10)
random.sum <- function(n)
{
x[1:n] <- ceiling(10*runif(n))
cat("x:",x[1:n],"\n")
cat("x(full):",x,"\n")
return(sum(x))
}
random.sum(10)
random.sum(5)
x<-rep(100,10)
random.sum(5)
random.sum <- function(n)
{
x[1:n] <- ceiling(10*runif(n))
cat("x:",x[1:n],"\n")
cat("x(full):",x,"\n")
return(sum(x[1:n]))
}
random.sum(10)
random.sum(5)
library("tswge", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
factor.wge(c(1,-0.26,-0.64,0.576))
factor.wge(c(2.4,-2.18,0.72))
factor.wge(c(0.1,-0.5,-0.08,0.24))
factor.wge(c(1.3,-0.4))
plot3tr.wge(n=100,4,p=(0.1,-0.5,-0.08,0.24))
plot3tr.wge(n=100,4,p=(0.1,-0.5,-0.08,0.24))
plot3tr.wge(n=100,p=4,p=(0.1,-0.5,-0.08,0.24))
plot3tr.wge(n=100,p=4,p=c(0.1,-0.5,-0.08,0.24))
plot3tr.wge(n=100,4,p=c(0.1,-0.5,-0.08,0.24))
plot3tr.wge(n=100,p=4,p=c(0.1,-0.5,-0.08,0.24),q=0)
plot3tr.wge(n=100,p=4,phi=c(0.1,-0.5,-0.08,0.24))
plot3tr.wge(n=100,p=4,phi=c(0.1,-0.5,-0.08,0.24),q=0)
plot3tr.wge(n=100,p=4,phi=c(0.1,-0.5,-0.08,0.24),q=0,theta = 0)
plot3tr.wge(n=100,2,p=c(1.3,-0.4))
plot3tr.wge(n=100,2,p=c(1.3,-0.4),q=0,theta=0)
plot3tr.wge(n=100,2,p=c(1.3,-0.4),q=1,theta=(1.9))
plot3tr.wge(n=100,2,p=c(1.3,-0.4),q=1,theta=(1.9))
factor.wge(c(1.3,-0.4))
plot3tr.wge(n=100,2,p=c(1.3,-0.4),q=1,theta=(1.9))
factor.wge(c(2.95,-3.87,2.82,-0.92))
plot3tr.wge(n=100,p=4,phi=c(2.95,-3.87,2.82,-0.92),q=1,theta =0.9)
factor.wge(c(1,0.49,-0.9,0.369))
factor.wge(c(-1,-1,-0.75))
plot3tr.wge(n=100,p=4,c(1,0.49,-0.9,0.369),q=3,c(-1,-1,-0.75))
factor.wge(c(2,-1.5))
true.aut.wge(q=2,theta=c(2,-1.5))
install.packages("nleqslv")
?nleqslv
??nleqslv
factor.wge(c(1.33333333,-0.6666666667))
true.aut.wge(q=2,theta=c(1.33333333,-0.6666666667))
library("tswge", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
gen.arma.wge(200,p=4,phi=c(1.6105,-1.91,1.61,-0.91),vara=10)
gen.arma.wge(200,p=4,phi=c(1.61001,-1.91,1.61,-0.91),vara=10)
gen.arma.wge(200,p=4,phi=c(1.61001,-1.91,1.61,-0.91),q=0,theta=0,vara=10)
gen.arma.wge(200,p=4,phi=c(1.61001,-1.91,1.61,-0.91),vara=10)
GatheredFertSub$FertConsGroup[FertilizerConsumption < 18] <- 1
GatheredFertSub$FertConsGroup[FertilizerConsumption >= 18 & FertilizerConsumption < 81] <- 2
GatheredFertSub$FertConsGroup[FertilizerConsumption > 158] <- 4
GatheredFertSub$FertConsGroup[FertilizerConsumption >= 81 & FertilizerConsumption < 158] <- 3
detach(GatheredFertSub)
summary(GatheredFertSub$FertConsGroup)
FCLabels <- c("low ","medium low","medium high","high")
GatheredFertSub$FertConsGroup <- factor(GatheredFertSub$FertConsGroup, labels=FCLabels)
summary(GatheredFertSub$FertConsGroup)
# Source code for Class 13 on Cleaning and Merging Data
# October 6, 2015
## Packages needed
# install.packages("WDI")
# install.packages("jsonlite")
# install.packages("tidyr")
# install.packages("countrycode")
# install.packages("ggplot2")
# install.packages("repmis")
# install.packages("RCurl")
# load packages
library(WDI)
library(tidyr)
library(dplyr)
library(countrycode)
library(ggplot2)
library(repmis)
library(RCurl)
## Get Data
WDIsearch("fertilizer consumption")
FertConsumpData <- WDI(indicator="AG.CON.FERT.ZS")
dim(FertConsumpData)
str(FertConsumpData)
head(FertConsumpData)
## Create ÒwideÓ format data for the example
SpreadFert <- spread(FertConsumpData, year, AG.CON.FERT.ZS)
SpreadFert <- arrange(SpreadFert, country)
str(SpreadFert)
dim(FertConsumpData)
head(SpreadFert[,1:5])
## Gather the data
GatheredFert <- gather(SpreadFert, Year, Fert, 3:9)
head(GatheredFert)
GatheredFert <- rename(GatheredFert, year=Year, FertilizerConsumption=Fert)
GatheredFert <- GatheredFert[order(GatheredFert$country, GatheredFert$year),]
head(GatheredFert)
## Plot the data looking for outliers
ggplot(data=GatheredFert,aes(FertilizerConsumption)) + geom_density() + xlab("\n Fertilizer Consumotion") + ylab("Density\n") + theme_bw()
FertOutliers <- subset(x = GatheredFert, FertilizerConsumption > 1000)
GatheredFertSub <- subset(x = GatheredFert, FertilizerConsumption <= 1000)
GatheredFertSub <- subset(x = GatheredFertSub, country != "Arab World")
GatheredFertSub <- subset(x = GatheredFertSub, !is.na(FertilizerConsumption)) #drop NAs
summary(GatheredFertSub$FertilizerConsumption)
## Transformations
GatheredFertSub$country[GatheredFertSub$country == "Korea, Rep."] <- "South Korea"
GatheredFertSub$logFertConsumption <- log(GatheredFertSub$FertilizerConsumption)
GatheredFertSub$FertilizerConsumption[GatheredFertSub$FertilizerConsumption == 0] <- 0.001
GatheredFertSub$logFertConsumption <- log(GatheredFertSub$FertilizerConsumption)
summary(GatheredFertSub$logFertConsumption)
attach(GatheredFertSub)
install.packages("WDI")
install.packages("jsonlite")
install.packages("tidyr")
install.packages("countrycode")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("repmis")
install.packages("RCurl")
library(WDI)
library(tidyr)
library(dplyr)
library(countrycode)
library(ggplot2)
library(repmis)
library(RCurl)
## Get Data
WDIsearch("fertilizer consumption")
FertConsumpData <- WDI(indicator="AG.CON.FERT.ZS")
dim(FertConsumpData)
str(FertConsumpData)
head(FertConsumpData)
## Create ÒwideÓ format data for the example
SpreadFert <- spread(FertConsumpData, year, AG.CON.FERT.ZS)
SpreadFert <- arrange(SpreadFert, country)
str(SpreadFert)
dim(FertConsumpData)
head(SpreadFert[,1:5])
## Gather the data
GatheredFert <- gather(SpreadFert, Year, Fert, 3:9)
head(GatheredFert)
GatheredFert <- rename(GatheredFert, year=Year, FertilizerConsumption=Fert)
GatheredFert <- GatheredFert[order(GatheredFert$country, GatheredFert$year),]
head(GatheredFert)
## Plot the data looking for outliers
ggplot(data=GatheredFert,aes(FertilizerConsumption)) + geom_density() + xlab("\n Fertilizer Consumotion") + ylab("Density\n") + theme_bw()
FertOutliers <- subset(x = GatheredFert, FertilizerConsumption > 1000)
GatheredFertSub <- subset(x = GatheredFert, FertilizerConsumption <= 1000)
GatheredFertSub <- subset(x = GatheredFertSub, country != "Arab World")
GatheredFertSub <- subset(x = GatheredFertSub, !is.na(FertilizerConsumption)) #drop NAs
summary(GatheredFertSub$FertilizerConsumption)
## Transformations
GatheredFertSub$country[GatheredFertSub$country == "Korea, Rep."] <- "South Korea"
GatheredFertSub$logFertConsumption <- log(GatheredFertSub$FertilizerConsumption)
GatheredFertSub$FertilizerConsumption[GatheredFertSub$FertilizerConsumption == 0] <- 0.001
GatheredFertSub$logFertConsumption <- log(GatheredFertSub$FertilizerConsumption)
summary(GatheredFertSub$logFertConsumption)
attach(GatheredFertSub)
## Create factor variable
GatheredFertSub$FertConsGroup[FertilizerConsumption < 18] <- 1
GatheredFertSub$FertConsGroup[FertilizerConsumption >= 18 & FertilizerConsumption < 81] <- 2
GatheredFertSub$FertConsGroup[FertilizerConsumption > 158] <- 4
GatheredFertSub$FertConsGroup[FertilizerConsumption >= 81 & FertilizerConsumption < 158] <- 3
detach(GatheredFertSub)
summary(GatheredFertSub$FertConsGroup)
FCLabels <- c("low ","medium low","medium high","high")
GatheredFertSub$FertConsGroup <- factor(GatheredFertSub$FertConsGroup, labels=FCLabels)
summary(GatheredFertSub$FertConsGroup)
class(GatheredFertSub$FertConsGroup)
FertFactor <-
cut(GatheredFertSub$FertilizerConsumption,breaks=c(-0.01,17.99,80.99,157.99,999.99),labels=c("low","medium low", "medium high", "high"))
head(GatheredFertSub,15)
test <- mutate(GatheredFertSub,FertFactor)
str(test)
head(FertFactor)
head(test)
head(GatheredFertSub,15)
## Merging data - download files from Class 9
fileURL <- "http://bit.ly/14aS5qq"
FinRegulatorData <- source_data(fileURL, sep=",", header=TRUE)
UrlAddress <- "https://raw.githubusercontent.com/christophergandrud/Disproportionality_Data/master/Disproportionality.csv"
DataURL <- getURL(UrlAddress)
DispropData <- read.table(textConnection(DataURL),sep=",", header=TRUE)
dim(DispropData)
dim(FinRegulatorData)
str(FinRegulatorData)
str(DispropData)
## FinRegulatorData doesnÕt have iso2c country code
FinRegulatorData$iso2c <- countrycode(FinRegulatorData$country,origin="country.name",destination="iso2c")
str(FinRegulatorData)
names(FinRegulatorData)
names(DispropData)
MergeData1 <- merge(x = FinRegulatorData, y=DispropData, by = "iso2c", all=TRUE)
names(FinRegulatorData)
names(DispropData)
names(MergeData1)
MergedData2 <- merge(FinRegulatorData, DispropData, union("iso2c", "year"), all=TRUE)
MergedData2 <- merge(MergedData2, GatheredFertSub, union("iso2c", "year"), all=TRUE)
names(MergedData2)
DataDuplicates <- MergedData2[duplicated(MergedData2[,1:2]),]
nrow(DataDuplicates)
DataNotDuplicates <- MergedData2[!duplicated(MergedData2[,1:2]),]
FinalCleanedData <- dplyr::select(DataNotDuplicates,-country.y,-country.x,-idn)
head(MergedData2[,1:2]))
head(MergedData2[,1:2])
DataDuplicates
duplicated(MergedData2[,1:2])
DataDuplicates2 <- MergedData2[duplicated(MergedData2[,1:7]),]
names(MergedData2)
DataDuplicates2 <- MergedData2[duplicated(MergedData2[,c(1,2,3,5,7,9,10,11)]),]
setwd("~/DataScience")
download.file(link,destfile="gdp.csv",method="curl")
setwd("~/ds")
download.file(link,destfile="gdp.csv",method="curl")
link <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(link,destfile="gdp.csv",method="curl")
gdp <- read.csv(file="gdp.csv",skip=5)
head(gdp)
gdp <- read.csv(file="gdp.csv",skip=5,header=F)
head(gdp)
gdp <- read.csv(file="gdp.csv",skip=5,header=F,na.strings="..")
str(gdp)
DataDuplicates <- MergedData2[duplicated(MergedData2[,1:2]),]
names(MergedData2)
DataDuplicates2 <- MergedData2[duplicated(MergedData2[,c(1,2,3,5,7,9,10,11)]),]
Hahasd <- function (x){
xbar <- mean(x);
dev <- x-xbar;
dev_square <- dev^2;
mean_dev <- mean(dev_square);
return(sqrt(mean_dev))
}
Hahasd(c(1:10))
hahasd <- function (x){
xbar <- mean(x);
dev <- x-xbar;
dev_square <- dev^2;
mean_dev <- mean(dev_square);
return(sqrt(mean_dev))
}
Hahasd(c(1:20))
hahasolve <- function(aa,bb,cc){
delta <- bb^2-4*aa*cc;
if (delta <0) return("The quadratic equation has no real roots")
}
hahasolve(1,0,1)
hahasolve <- function(aa,bb,cc){
delta <- bb^2-4*aa*cc;
if (delta <0) return("The quadratic equation has no real roots");
if (delta ==0) return(paste("Only one distinct real root:",-bb/(2*aa)));
if (delta >0) return(paste("Two distinct real roots: x1=",(-bb+sqrt(delta))/(2*aa),"  x2=",
(-bb-sqrt(delta)/(2*aa)),sep=""))
}
hahasolve(1,2,1)
hahasolve(1,3,1)
hahasolve(1,-2,-8)
hahasolve <- function(aa,bb,cc){
delta <- bb^2-4*aa*cc;
if (delta <0) return("The quadratic equation has no real roots");
else if (delta ==0) return(paste("Only one distinct real root:",-bb/(2*aa)));
else return(paste("Two distinct real roots: x1=",(-bb+sqrt(delta))/(2*aa),"  x2=",
(-bb-sqrt(delta)/(2*aa)),sep=""))
}
hahasolve <- function(aa,bb,cc){
delta <- bb^2-4*aa*cc;
if (delta <0) return("The quadratic equation has no real roots")
else if (delta ==0) return(paste("Only one distinct real root:",-bb/(2*aa)))
else return(paste("Two distinct real roots: x1=",(-bb+sqrt(delta))/(2*aa),"  x2=",
(-bb-sqrt(delta)/(2*aa)),sep=""))
}
hahasolve(1,-2,-8)
hahasolve(1,3,1)
hahasolve(1,2,1)
hahasolve(1,0,1)
hahasolve <- function(aa,bb,cc){
delta <- bb^2-4*aa*cc;
if (delta <0) return("The quadratic equation has no real roots")
else if (delta ==0) return(paste("Only one distinct real root:",-bb/(2*aa)))
else return(paste("Two distinct real roots: x1=",(-bb+sqrt(delta))/(2*aa),"    x2=",
(-bb-sqrt(delta)/(2*aa))))
}
hahasolve(1,3,1)
hahasolve <- function(aa,bb,cc){
delta <- bb^2-4*aa*cc;
if (delta <0) return("The quadratic equation has no real roots")
else if (delta ==0) return(paste("Only one distinct real root:",-bb/(2*aa)))
else return(paste("Two distinct real roots: x1=",(-bb+sqrt(delta))/(2*aa),"    x2=",
(-bb-sqrt(delta))/(2*aa)))
}
hahasolve(1,3,1)
